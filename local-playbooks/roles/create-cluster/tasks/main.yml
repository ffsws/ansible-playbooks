---
# tasks file for create-cluster

- name: abort if the pull secret is not present
  stat:
    path: ~/.ocp4_pull_secret
  register: ps
- fail:
    msg: "OCP pull secret is not found!"
  when: ps.stat.exists == False
    
- name: create openshift workdir
  file:
    path: "{{ workdir }}"
    state: "directory"

# install config is deleted when ignition
# configs are created.  this task also
# creates a copy to check for debugging
- name: generate install-config.yaml
  tags: config
  template:
    dest: "{{ workdir }}/{{ item }}"
    src: install-config.yaml.j2
  with_items:
  - install-config.yaml
  - install-config.copy.yaml

- name: create ignition configs
  tags: config
  shell: "openshift-install --dir=`pwd` create ignition-configs"
  args:
    chdir: "{{ workdir }}"
    creates: "{{ workdir }}/metadata.json"

- block:
  - name: make ignition config directory
    file:
      path: /var/www/html/ignition
      state: directory
  - name: get ign files
    tags: config
    shell: ls {{ workdir }}/*.ign
    register: ign_raw
  - name: copy ignition configs to /var/www/html/ignition
    tags: config
    copy:
      src: "{{ item }}"
      dest: "/var/www/html/ignition/"
      remote_src: yes
    with_items: "{{ ign_raw.stdout_lines }}"

- name: install kubeconfig
  tags: wait-install
  copy:
    src: "{{ workdir }}/auth/kubeconfig"
    dest: "~/.kube/config"
    remote_src: yes
    force: yes

- name: create /etc/hosts entry
  tags: etc-hosts
  connection: local
  copy:
    dest: "{{ playbook_dir }}/../etc.hosts"
    content: >
      {{ bastion_public_ip_address }}
      bastion.{{ cluster_domain_name }}
      api.{{ cluster_domain_name }}
      console-openshift-console.apps.{{ cluster_domain_name }}
      oauth-openshift.apps.{{ cluster_domain_name }}

- name: create and boot the bootstrap node
  include_tasks: create-guest.yml
  vars:
    coreos_role: bootstrap
    directory_entry: "{{ lookup('template', '{{ playbook_dir}}/roles/create-cluster/templates/guest.direct.j2') }}"
  with_items: "{{ cluster_nodes[coreos_role] }}"

- name: create and boot the master nodes
  include_tasks: create-guest.yml
  vars:
    coreos_role: masters
    directory_entry: "{{ lookup('template', '{{ playbook_dir}}/roles/create-cluster/templates/guest.direct.j2') }}"
  with_items: "{{ cluster_nodes[coreos_role] }}"

- name: create and boot the worker nodes
  include_tasks: create-guest.yml
  vars:
    coreos_role: workers
    directory_entry: "{{ lookup('template', '{{ playbook_dir}}/roles/create-cluster/templates/guest.direct.j2') }}"
  with_items: "{{ cluster_nodes[coreos_role] }}"
  when: cluster_nodes.workers is defined

- name: wait for bootstrap node accessibility
  wait_for:
    port: 22
    host: "{{ cluster_nodes['bootstrap'][item].ip }}"
    search_regex: OpenSSH
    delay: 1
    timeout: 5000
  with_items: "{{ cluster_nodes['bootstrap'] }}"

- name: wait for master node accessibility
  wait_for:
    port: 22
    host: "{{ cluster_nodes['masters'][item].ip }}"
    search_regex: OpenSSH
    delay: 1
    timeout: 5000
  with_items: "{{ cluster_nodes['masters'] }}"

- name: wait for worker node accessibility
  wait_for:
    port: 22
    host: "{{ cluster_nodes['workers'][item].ip }}"
    search_regex: OpenSSH
    delay: 1
    timeout: 5000
  with_items: "{{ cluster_nodes['workers'] }}"
  when: cluster_nodes.workers is defined

- name: wait for bootstrap complete
  tags: config
  shell: openshift-install --dir=`pwd` wait-for bootstrap-complete --log-level debug
  args:
    chdir: "{{ workdir }}"
  retries: 1
  delay: 0

- name: start the approve-csrs task
  systemd:
    name: ocp-approve-csrs
    state: started

- name: wait for install complete
  tags: wait-install
  shell: openshift-install --dir=`pwd` wait-for install-complete
  args:
    chdir: "{{ workdir }}"
  retries: 1
  delay: 0

- name: stop the approve-csrs task
  systemd:
    name: ocp-approve-csrs
    state: stopped
